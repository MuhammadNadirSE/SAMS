@model TMD.Web.ViewModels.Product.ProductViewModel
@{
    int productID = Model.Product.ProductID > 0 ? Model.Product.ProductID : 0;
    string createUpdate = Model.Product.ProductID > 0 ? "Update" : "Add New";
    ViewBag.Title = createUpdate + " Product Model";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    Session["MenuKey"] = 8;
    Session["ParentMenu"] = 1;
}


@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{

    @Html.HiddenFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, DateTime>>)(x => (DateTime)x.Product.CreatedDate));
    @Html.HiddenFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(x => (string)x.Product.CreatedBy));


    <div class="portlet portletCustomHeight light bg-inverse">
        <ul class="nav nav-pills nav-justified steps">
            <li class="active">
                <a href='@Url.Action("Create", "Product", productID)' class="step">
                    <span class="number">
                        1 -
                    </span>
                    <span class="desc">
                        <i class="fa fa-check"></i> Product basic detail
                    </span>
                </a>
            </li>
            <li>
                <a href='@Url.Action("ModelSpecs", "Product", productID)' class="step">
                    <span class="number">
                        2 -
                    </span>
                    <span class="desc">
                        <i class='@(productID > 0 ? "fa fa-check" : "")'></i> Product model and Technical specs.
                    </span>
                </a>
            </li>
        </ul>
        <div class="portlet-title">
            <div class="caption">
                <i class="icon-handbag font-red-sunglo"></i>
                <span class="caption-subject font-red-sunglo bold uppercase">Product</span>
                <span class="caption-helper">@createUpdate</span>
            </div>
        </div>

        <div class="portlet-body form">
            <div class="form-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, int>>)(m => (int)m.Product.ProductID))
                @Html.HiddenFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, DateTime>>)(m => (DateTime)m.Product.CreatedDate))
                @Html.HiddenFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.CreatedBy))


                <div class="row">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.ProductName), new {@class = "col-md-4 control-label requiredLabel"})
                            <div class="col-md-8">
                                @Html.TextBoxFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.ProductName), new {@class = "form-control mandatory", placeholder = "Product Name"})
                                @Html.ValidationMessageFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(x => (string)x.Product.ProductName))

                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-4 control-label requiredLabel">Category</label>
                            <div class="col-md-8">
                                @Html.DropDownListFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, int>>)(x => (int)x.Product.ProductCategoryID), new SelectList(Model.ProductCategories, "ProductCategoryID", "CatName", (object)Model.Product.ProductCategoryID), "--Please Select--", new {@class = "form-control  "})
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, decimal>>)(m => (decimal)m.Product.Price), new {@class = "col-md-4 control-label requiredLabel"})
                            <div class="col-md-8">
                                @Html.TextBoxFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, decimal>>)(m => (decimal)m.Product.Price), new {@class = "form-control mandatory", placeholder = "Price"})
                                @Html.ValidationMessageFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, decimal>>)(x => (decimal)x.Product.Price))
                            </div>
                        </div>
                    </div>
                    
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.ShortDescription), new { @class = "col-md-4 control-label requiredLabel" })
                            <div class="col-md-8">
                                @Html.TextAreaFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.ShortDescription), new { @class = "form-control mandatory", placeholder = "Short Description" })
                                @Html.ValidationMessageFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(x => (string)x.Product.ShortDescription))
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.DetailDescription), new {@class = "col-md-4 control-label requiredLabel"})
                            <div class="col-md-8">
                                @Html.TextAreaFor((System.Linq.Expressions.Expression<Func<TMD.Web.ViewModels.Product.ProductViewModel, string>>)(m => (string)m.Product.DetailDescription), new {@class = "form-control mandatory", placeholder = "Detail Description"})
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <script>
            function ValidateDropDown() {
                var value = $('#ProductCategoryModel_MainCategoryId option:selected').val();
                if (value == "" || value < 0)
                    return false;
                return true;
            }

            jQuery(document)
                .ready(function() {
                });
        </script>
    </div>
}

